#Set-up
setwd("C:/Users/Hagen/uni/DS")
source(file = "Rintro_HelperFunctions.R")
# set working directory
setwd("C:/Users/Hagen/uni/DS/Submission_1")
# get the data with class labels
df = read.csv('data/BADS_WS1718_known.csv')
# look if df loaded properly
tail(df)
# check for na's
apply(df, 2, function(x) length(which(!is.na(x))))
# Get the colnames
colnames(df)
# Get the colnames
colnames(df)
# Figure out numeric columns
sapply(df, is.numeric)
df['return'][df$item_price==0]
df['return']
df['return'][df$item_price == 0]
df['return', 'item_price'][df$item_price == 0]
df$return
df['return', 'item_price']
df[['return', 'item_price']]
df['return', 'item_price']
df[c('return', 'item_price')]
df[c('return', 'item_price')][df$item_price == 0]
df[c('return', 'item_price')][df$item_price = 0]
df[c('return', 'item_price')][df$item_price == 0]
df[c('return', 'item_price')]
df[c('return', 'item_price')][df$item_price[df$item_price == 0]]
df[c('return', 'item_price')][df[c('return', 'item_price')[df$item_price==0]]
df[c('return', 'item_price')][df[c('return', 'item_price')[df$item_price==0]]]
# Moving on to the categorical values
# Looking at the values
factor_idx <- sapply(df, is.factor)
df[c('return', 'item_price')][df[c('return', 'item_price')[df$item_price==0]]]
df[c('return', 'item_price')]
t <- df[c('return', 'item_price')]
t[t$item_price == 0]
# set working directory
setwd("C:/Users/Hagen/uni/DS/Submission_1")
# get the data with class labels
df = read.csv('data/BADS_WS1718_known.csv')
# look if df loaded properly
tail(df)
# check for na's
apply(df, 2, function(x) length(which(!is.na(x))))
# Get the colnames
colnames(df)
# Figure out numeric columns
sapply(df, is.numeric)
# Figure out factor columns
sapply(df, is.factor)
# return is not factorized!
df$return <- as.factor(df$return)
# Look at the numeric values
numeric_idx <- sapply(df, is.numeric)
df[numeric_idx]
#Check their number of disctinct values
lapply(df[numeric_idx], function(x) length(unique(x)))
# order_item_id = 100000 --> every order has a different id
# item_id = 2656 --> we have 2656 different items in our observations
# brand_id = 155 --> 155 different brands
# item_price = 332 --> 332 different prices
# user_id = 37663 --> 37663 distinct customers
# Since IDs have no inherent explanatory value for us, we can only check the price for numerical plausability
summary(df$item_price) #Min is at 0.00. A price of 0 is not reasonable
hist(df$item_price)
length(df$item_price[df$item_price<=0]) # 356 of 10.000 samples have a price of 0 (or negative). 3,56% of the samples
length(df$item_price[df$item_price > 400]) # No price is greater than 400â‚¬, so there are no outliers in the higher price-segments
t <- df[c('return', 'item_price')]
t
t[t$item_price == 0]
t[t$item_price > 0]
t[t$item_price]
t$item_price
t$item_price == 0
t$return[t$item_price == 0]
df[factor_idx]$delivery_date # missing values marked wih '?'
unique(df[factor_idx]$item_size) #114 different sizes, need to cluster them somehow
df$item_size
which(df$item_size, is.character)
lapply(df$item_size, is.character)
lapply(df$item_size, is.numeric)
str(df$item_size)
unique(df[non_numeric_idx])
non_numeric_idx <- lapply(df$item_size, !is.numeric)
non_numeric_idx <- lapply(df$item_size, is.numeric)
unique(df[non_numeric_idx])
non_numeric_idx
df$item_price[non_numeric_idx]
df$item_price[TRUE]
class(non_numeric_idx)
vec <- vector(non_numeric_idx)
vec <- data.frame(non_numeric_idx)
vec <- data.frame(non_numeric_idx)
df$item_price[vec]
df$item_price[vec]
vec
# 1. delivery-date --> missing values with ?  --> new column (del date known)
# 2. item_size --> 114 categories is to much, needs cleanup (clustering)
# 3. item_color --> missing values
# 4. item_price --> Define how to handle price == 0$
# 5. user_title --> what to do with 'not_reported'. Keep or drop?
# 6. user_dob --> missing values with ?
# 7. (dont forget to make price a factor)
# 8. Maybe derive more insightful values --> OrderDate-DeliveryDate could be interesting, or count on user_id (how often they ordered alreday)
colnames(df)
df$item_color
summary(df$item_color)
order(summary(df$item_color))
summary(df$item_color)
hist(df$item_color)
hist(summary(df$item_color))
summary(df$item_color)
class(summary(df$item_color))
sort.list(summary(df$item_color))
table(df$item_color)
sort.int(summary(df$item_color))
sort.int(summary(df$item_color), decreasing = FALSE)
sort.int(summary(df$item_color), decreasing = TRUE)
# 1. delivery-date --> missing values with ?  --> new column (del date known)
# 2. item_size --> 114 categories is to much, needs cleanup (clustering)
# 3. item_color --> missing values
# 4. item_price --> Define how to handle price == 0$
# 5. user_title --> what to do with 'not_reported'. Keep or drop?
# 6. user_dob --> missing values with ?
# 7. (dont forget to make price a factor)
# 8. Maybe derive more insightful values --> OrderDate-DeliveryDate could be interesting, or count on user_id (how often they ordered alreday)
colnames(df)
df$user_title
unique(df$user_title)
sort.int(summary(df$user_title), decreasing = TRUE)
df[c('return', 'user_title')]
summary(df[c('return', 'user_title')])
t <- df[c('return', 'user_title')]
t[t$user_title == 'Mr']
t$return[t$user_title == 'Mr']
summary(t$return[t$user_title == 'Mr'])
2078/1422
summary(t$return[t$user_title == 'Mrs'])
49440/46536
2078/(1422 + 2078)
49440/(46536 + 49440)
# 1. delivery-date --> missing values with ?  --> new column (del date known)
# 2. item_size --> 114 categories is to much, needs cleanup (clustering)
# 3. item_color --> missing values
# 4. item_price --> Define how to handle price == 0$
# 5. user_title --> what to do with 'not_reported'. Keep
# 6. user_dob --> calculate age and categorize (young, medium, old, other (for missing values))
# 7. (dont forget to make price a factor)
# 8. Maybe derive more insightful values --> OrderDate-DeliveryDate could be interesting, or count on user_id (how often they ordered alreday)
colnames(df)
unique(df[factor_idx]$user_reg_date)
# 1. delivery-date --> missing values with ?  --> new column (del date known)
# 2. item_size --> 114 categories is to much, needs cleanup (clustering)
# 3. item_color --> missing values
# 4. item_price --> Define how to handle price == 0$
# 5. user_title --> what to do with 'not_reported'. Keep
# 6. user_dob --> calculate age and categorize (young, medium, old, other (for missing values))
# 7. (dont forget to make price a factor)
# 8. Maybe derive more insightful values --> OrderDate-DeliveryDate could be interesting, or count on user_id (how often they ordered alreday)
colnames(df)
sort.int(summary(df$brand_id), decreasing = TRUE)
df$brand_id <- as.factor(df$brand_id)
sort.int(summary(df$brand_id), decreasing = TRUE)
# 1. delivery-date --> missing values with ?  --> new column (del date known)
# 2. item_size --> 114 categories is to much, needs cleanup (clustering)
# 3. item_color --> missing values
# 4. item_price --> Define how to handle price == 0$
# 5. user_title --> what to do with 'not_reported'. Keep
# 6. user_dob --> calculate age and categorize (young, medium, old, other (for missing values))
# 7. (dont forget to make price a factor)
# 8. Maybe derive more insightful values --> OrderDate-DeliveryDate could be interesting, or count on user_id (how often they ordered alreday)
colnames(df)
sort.int(summary(df$item_id), decreasing = TRUE)
df$item_id <- as.factor(df$item_id)
sort.int(summary(df$item_id), decreasing = TRUE)
sort.int(summary(df$brand_id), decreasing = TRUE)
# 1. delivery-date --> missing values with ?  --> new column (del date known)
# 2. item_size --> 114 categories is to much, needs cleanup (clustering)
# 3. item_color --> missing values
# 4. item_price --> Define how to handle price == 0$
# 5. user_title --> what to do with 'not_reported'. Keep
# 6. user_dob --> calculate age and categorize (young, medium, old, other (for missing values))
# 7. (dont forget to make price a factor)
# 8. Maybe derive more insightful values --> OrderDate-DeliveryDate could be interesting, or count on user_id (how often they ordered alreday)
colnames(df)
sort.int(summary(df$item_size), decreasing = TRUE)
sort.int(summary(df$brand_id), decreasing = TRUE)
# 1. delivery-date --> missing values with ?  --> new column (del date known)
# 2. item_size --> 114 categories is to much, needs cleanup (clustering)
# 3. item_color --> missing values
# 4. item_price --> Define how to handle price == 0$
# 5. user_title --> what to do with 'not_reported'. Keep
# 6. user_dob --> calculate age and categorize (young, medium, old, other (for missing values))
# 7. (dont forget to make price a factor)
# 8. Maybe derive more insightful values --> OrderDate-DeliveryDate could be interesting, or count on user_id (how often they ordered alreday)
colnames(df)
