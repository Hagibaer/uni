# get the data with class labels
df = read.csv('/data/BADS_WS1718_known.csv')
# set working directory
setwd("C:/Users/Hagen/uni/DS/Submission_1")
# get the data with class labels
df = read.csv('/data/BADS_WS1718_known.csv')
# get the data with class labels
df = read.csv('data/BADS_WS1718_known.csv')
df.head()
head(df)
# look if df loaded properly
tail(df)
colnames(df)
summary(df)
print(class(df[col]))
# get a summary of column types
for(col in colnames(df)){
print(class(df[col]))
}
class(df[col])
# get a summary of column types
for(col in colnames(df)){
class(df[col])
}
class(df[item_id])
class(df["item_id"])
summary(df[col['item_id']])
summary(df[col['item_id'])
summary(df[col['item_id']))
summary(df['item_id']))
summary(df['item_id'])
# Get the colnames
colnames(df)
df["order_item_id"]
summary(df["order_item_id"])
count(df["order_item_id"])
str(df["order_item_id"])
str(df[["order_item_id"]])
unique(df["order_item_id"])
length(unique(df["order_item_id"]))
apply(df, 2, function(x) length(which(!is.na(x))))
apply(df["order_item_id"], 2, function(x)length(unique(x)))
lapply(df["order_item_id"], 2, function(x)length(unique(x)))
sapply(df["order_item_id"], 2, function(x)length(unique(x)))
lapply(df["order_item_id"], function(x)length(unique(x)))
#individual check of the columns
a <- str(df[["order_item_id"]])
print("Colname: \t" + a)
cat("Colname: \t" + a)
cat("Colname: \t" , a)
cat("Colname: \t" , b)
#individual check of the columns
a <- str(df[["order_item_id"]])
b <- length(unique(df["order_item_id"]))
c <- lapply(df["order_item_id"], function(x)length(unique(x)))
cat("Colname: \t" , b)
#individual check of the columns
type <- str(df[["order_item_id"]])
cat("Colname: abc \n Type of the column" ,type, "\n Number of disctinct values: ", num_distinct_values )
#individual check of the columns
type <- str(df[["order_item_id"]])
num_distinct_values <- lapply(df["order_item_id"], function(x)length(unique(x)))
cat("Colname: abc \n Type of the column" ,type, "\n Number of disctinct values: ", num_distinct_values )
cat("Colname: abc \n Type of the column %s \n Number of disctinct values: %d", type, num_distinct_values)
cat(sprintf("Colname: abc \n Type of the column %s \n Number of disctinct values: %d", type, num_distinct_values))
cat(sprintf("Colname: abc \n Type of the column %s \n Number of disctinct values: %d", (type, num_distinct_values)))
cat(sprintf("Colname: abc \n Type of the column %s \n Number of disctinct values: %d", (type))
# get a summary of column types
for(col in colnames(df)){
class(df[col])
}
cat(sprintf("Colname: abc \n Type of the column %s \n Number of disctinct values: %d", type)
cat(sprintf("Colname: abc \n Type of the column %s \n Number of disctinct values: %d", type))
cat(sprintf("Colname: abc \n Type of the column %s \n Number of disctinct values: %d", type))
message(sprintf("Colname: abc \n Type of the column %s \n Number of disctinct values: %d", type))
sprintf("Type: %s", type)
type
#individual check of the columns
type <- str(df[["order_item_id"]])
num_distinct_values <- lapply(df["order_item_id"], function(x)length(unique(x)))
type
sprintf("Type: %s", type)
sprintf("Type: %s", num_distinct_values)
sapply(df, is.numeric)
# Figure out factor columns
sapply(df. is.factor())
# Figure out factor columns
sapply(df, is.factor())
# Figure out factor columns
sapply(df, is.factor)
# return is not factorized!
?as.factor
df$return <- as.factor(df$return)
df$return
df[sapply(df, isnumeric)]
df[sapply(df, is.numeric)]
# Look at the numeric values
numeric_idx <- sapply(df, is.numeric)
df[numeric_idx]
#Check their number of disctinct values
lapply(df[numeric_idx], function(x) length(unique(x))
#Check their number of disctinct values
lapply(df[numeric_idx], function(x) length(unique(x)))
#individual check of the columns
type <- str(df[["order_item_id"]])
#Check their number of disctinct values
lapply(df[numeric_idx], function(x) length(unique(x)))
# order_item_id = 1000 --> every order has a different id
# item_id = 2656 --> we have 2656 different items in our observations
# brand_id = 155 --> 155 different brands
# item_price = 332 --> 332 different prices
# user_id = 37663 --> 37663 distinct customers
# Since IDs have no inherent explanatory value for us, we can only check the price for numerical plausability
df$item_price
# order_item_id = 1000 --> every order has a different id
# item_id = 2656 --> we have 2656 different items in our observations
# brand_id = 155 --> 155 different brands
# item_price = 332 --> 332 different prices
# user_id = 37663 --> 37663 distinct customers
# Since IDs have no inherent explanatory value for us, we can only check the price for numerical plausability
summary(df$item_price)
hist(df$item_price)
boxplot(df$item_price)
plot(df$order_item_id, df$item_price)
plot(seq(1,100), df$item_price))
plot(seq(1,100), df$item_price)
plot(seq(1,100), df$item_price[:100])
plot(seq(1,100), df$item_price[ÃŸ:100])
plot(seq(1,100), df$item_price[0:100])
points(density(df$item_price),type="l",col="blue")
hist(df$item_price)
points(density(df$item_price),type="l",col="blue")
df$price
df$item_price
df$item_price[df$item_price==0]
length(df$item_price[df$item_price==0])
df$item_price[df$item_price > 400]
df$item_price[df$item_price > 300]
df$item_price[df$item_price > 400]
new_price <- df$item_price[!df$item_price==0]
hist(new_price)
new_price
new_price[new_price == 0]
summary(new_price)
length(df$item_price[df$item_price<=0]) # 356 of 10.000 samples have a price of 0. 3,56% of the samples
unique(df[col])
# Moving on to the categorical values
# 1. Get distinct values from every column
factor_idx <- sapply(df, is.factor)
for(col in colnames(df[factor_idx]])){
unique(df[col])
}
for(col in colnames(df[factor_idx]]){
unique(df[col])
}
#individual check of the columns
type <- str(df[["order_item_id"]])
num_distinct_values <- lapply(df["order_item_id"], function(x)length(unique(x)))
type
sprintf("Type: %s", num_distinct_values)
message(sprintf("Colname: abc \n Type of the column %s \n Number of disctinct values: %d", type))
# order_item_id = numeric id from 1 - 100.000
# get a summary of column types
for(col in colnames(df)){
class(df[col])
}
for(col in colnames(df[factor_idx]){
for(col in colnames(df[factor_idx])){
unique(df[col])
}
print(unique(df[col]))
message(unique(df[col]))
df[factor_idx]
df[factor_idx]$order_date
df[factor_idx]$delivery_date
df[factor_idx]$order_date
df[factor_idx]$order_date
df[factor_idx]$delivery_date
df[factor_idx]$item_size
df[factor_idx]$item_color
df[factor_idx]$user_title #
df[factor_idx]$user_dob #
df[factor_idx]$user_state
df[factor_idx]$user_reg_date #
unique(df[factor_idx]$order_date)
unique(df[factor_idx]$item_size)
unique(df[factor_idx]$item_color)
unique(df[factor_idx]$order_date)
unique(df[factor_idx]$user_title)
df[factor_idx]$user_state # seems fine
unique(df[factor_idx]$user_dob)
unique(df[factor_idx]$item_size)
unique(df[factor_idx]$user_state)
unique(df[factor_idx]$user_reg_date)
unique(df[numeric_idx][col])
unique(df[numeric_idx])
# data-preprocessing
# columns that need work:
colnames(df)
