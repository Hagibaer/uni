# Custom function
standardize = function(x) {
if (is.numeric(x)){
mu = mean(x)
std = sd(x)
return((x - mu) / std)
}
else{
return(x)
}
}
a = c(-100, 'a', -10, 0, 10, 25, 100)
standardize(a)
a = c(-100, -25, -10, 0, 10, 25, 100)
standardize(a)
# Using inbuilt-functions
help(dnorm)
# Using inbuilt-functions
dnorm(1,2,3,4,5)
# Using inbuilt-functions
dnorm(x = c(1,2,3,6))
seq(-2,2, by=0.2)
nvValues = dnorm(seq(-2,2, by=0.2))
plot(nvValues, type='n')
plot(nvValues, type='l')
nvValues = dnorm(seq(-2,2, by=0.2), mean = 0, sd = 1)
plot(nvValues, type='l')
plot(nvValues, type='l', x = seq(-2,2, by=0,2))
plot(nvValues, type='l', xlab = seq(-2,2, by=0.2))
nvValues = dnorm(seq(-2,2, by=0.2), mean = 0, sd = 1)
plot(nvValues, type='
dnorm(x = c(1,2,3,6))
nvValues = dnorm(seq(-2,2, by=0.2), mean = 0, sd = 1)
plot(nvValues, type='l', xlab = seq(-2,2, by=0.2))
dnorm(x = c(1,2,3,6))
nvValues = dnorm(seq(-2,2, by=0.2), mean = 0, sd = 1)
plot(nvValues, type='l', xlab = seq(-2,2, by=0.2))
plot(nvValues, type='l')
plot(x = seq(-2,2, by = 0.2), y = nvValues, type='l')
dnorm(x = c(1,2,3,6))
x = seq(-2,2, by=0.2)
nvValues = dnorm(x, mean = 0, sd = 1)
plot(x = x, y = nvValues, type='l')
# Variables and Classes
a <- 3.0
b <- 4.5
class(a)
class(b) == 'character'
a^2 + 1/b
sqrt(a*b)
# Matrix algebra
A = matrix(c(1,4,7,2,5,8,3,6,10), nrow=3)
B = matrix(c(1:9), nrow=3)
y = matrix(c(1:3))
a * A
A %*% B
invA = solve(A)
A %*%invA
t(B)
B[1,] = c(1,1,1)
ols = function(A, y) solve(t(A)%*%A)%*%t(A)%*%y
ols(A, y)
# Indexing
# A B y (anzeigen)
A[3,2] * B[2,1]
A[1,] * B[,3]
y[y>1]
A[,2][A[,1] >= 4]
# Custom function
standardize = function(x) {
if (is.numeric(x)){
mu = mean(x)
std = sd(x)
return((x - mu) / std)
}
else{
return(x)
}
}
a = c(-100, -25, -10, 0, 10, 25, 100)
standardize(a)
# Using inbuilt-functions
dnorm(x = c(1,2,3,6))
x = seq(-2,2, by=0.2)
nvValues = dnorm(x, mean = 0, sd = 1)
plot(x = x, y = nvValues, type='l')
A <- matrix(c(1, sqrt(2), sqrt(2), 0))
A
A <- matrix(c(1, sqrt(2), sqrt(2), 0),ncol = 2)
A
eigen(A, symmetric = TRUE)
eigen(A)
B <- matrix(c(1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1), ncol=4)
B
eigen(B)
C <- matrix(c(0,1,2,1), ncol = 2,byrow = TRUE)
C
C^10
D <- matrix(1,2,3,4, ncol = 2, byrow = TRUE)
D <- matrix(c(1,2,3,4) ncol = 2, byrow = TRUE)
D <- matrix(c(1,2,3,4), ncol = 2, byrow = TRUE)
solve(D)
D
D <- matrix(c(a,b,c,d, ncol=2, byrow=TRUE))
D <- matrix(c(a,b,c,d), ncol=2, byrow=TRUE))
D <- matrix(c(a,b,c,d), ncol=2, byrow=TRUE)
E <- matrix(c(2, -2, 3, 0 ,3, 1, 2, -8, 1), ncol=3, byrow=TRUE)
solve(E)
log(a)
a <- 3.0
b <- 4.5
class(a)
class(b) == 'character'
a^2 + 1/b
sqrt(a*b)
log(a)
log2(a)
# Variables and Classes
a <- 3.0
b <- 4.5
class(a)
class(b) == 'character'
a^2 + 1/b
sqrt(a*b)
log2(a)
# Matrix algebra
A = matrix(c(1,4,7,2,5,8,3,6,10), nrow=3)
B = matrix(c(1:9), nrow=3)
y = matrix(c(1:3))
a * A
A %*% B
invA = solve(A)
A %*%invA
t(B)
B[1,] = c(1,1,1)
ols = function(A, y) solve(t(A)%*%A)%*%t(A)%*%y
ols(A, y)
# Indexing
# A B y (anzeigen)
A[3,2] * B[2,1]
A[1,] * B[,3]
y[y>1]
A[,2][A[,1] >= 4]
# Custom function
standardize = function(x) {
if (is.numeric(x)){
mu = mean(x)
std = sd(x)
return((x - mu) / std)
}
else{
return(x)
}
}
a = c(-100, -25, -10, 0, 10, 25, 100)
standardize(a)
# Using inbuilt-functions
dnorm(x = c(1,2,3,6))
x = seq(-2,2, by=0.2)
nvValues = dnorm(x, mean = 0, sd = 1)
plot(x = x, y = nvValues, type='l')
A[4,]
# Variables and Classes
a <- 3.0
b <- 4.5
class(a)
class(b) == 'character'
a^2 + 1/b
sqrt(a*b)
log2(a)
# Matrix algebra
A = matrix(c(1,4,7,2,5,8,3,6,10), nrow=3)
B = matrix(c(1:9), nrow=3)
y = matrix(c(1:3))
a * A
A %*% B
invA = solve(A)
A %*%invA
t(B)
B[1,] = c(1,1,1)
ols = function(A, y) solve(t(A)%*%A)%*%t(A)%*%y
ols(A, y)
# Indexing
# A B y (anzeigen)
A[3,2] * B[2,1]
A[1,] * B[,3]
y[y>1]
A[,2][A[,1] >= 4]
# A[4,]
# Custom function
standardize = function(x) {
if (is.numeric(x)){
mu = mean(x)
std = sd(x)
return((x - mu) / std)
}
else{
return(x)
}
}
a = c(-100, -25, -10, 0, 10, 25, 100)
standardize(a)
# Using inbuilt-functions
dnorm(x = c(1,2,3,6))
x = seq(-2,2, by=0.2)
nvValues = dnorm(x, mean = 0, sd = 1)
plot(x = x, y = nvValues, type='l')
# NEED FOR CHANGE ----
# Note that this code will not work on your computer.
wdir <- getwd()
# You can uncomment the next line and specify the directory for the exercise on your computer
# wdir <- "C://Your/own/path"
# End of NEED FOR CHANGE ----
# knitr::opts_knit$set(root.dir = wdir)
# results = c("all", "hide")
knitr::opts_chunk$set(echo = TRUE, results = 'all', message = FALSE, warning = FALSE, fig.keep = 'all', cache = FALSE)
options(repos=c(CRAN = "https://cran.uni-muenster.de/"))
x <- 10
y <- 10:15
z <- c("hello", "bye")
example <- function() print("example")
l <- list(x, y, z, example)
l
str(l) # Summarize the structure of a list
# List indexing
# [ ] returns a list
l[1:2]
l[2]
# [[ ]] returns a single list element
l[[2]]
B
# Variables and Classes
a <- 3.0
b <- 4.5
class(a)
class(b) == 'character'
a^2 + 1/b
sqrt(a*b)
log2(a)
# Matrix algebra
A = matrix(c(1:8, 10), nrow=3)
B = matrix(c(1:9), nrow=3)
y = matrix(c(1:3))
a * A
A %*% B
invA = solve(A)
A %*%invA
t(B)
B[1,] = c(1,1,1)
ols = function(A, y) solve(t(A)%*%A)%*%t(A)%*%y
ols(A, y)
# Indexing
# A B y (anzeigen)
A[3,2] * B[2,1]
A[1,] * B[,3]
y[y>1]
A[,2][A[,1] >= 4]
# A[4,]
# Custom function
standardize = function(x) {
if (is.numeric(x)){
mu = mean(x)
std = sd(x)
return((x - mu) / std)
}
else{
return(x)
}
}
a = c(-100, -25, -10, 0, 10, 25, 100)
standardize(a)
# Using inbuilt-functions
dnorm(x = c(1,2,3,6))
x = seq(-2,2, by=0.2)
nvValues = dnorm(x, mean = 0, sd = 1)
plot(x = x, y = nvValues, type='l')
ols(A, y)
# Variables and Classes
a <- 3.0
b <- 4.5
class(a)
class(b) == 'character'
a^2 + 1/b
sqrt(a*b)
log2(a)
# Matrix algebra
A = matrix(c(1:8, 10), nrow=3)
B = matrix(c(1:9), nrow=3)
y = matrix(c(1:3))
a * A
A %*% B
invA = solve(A)
A %*%invA
t(B)
B[1,] = c(1,1,1)
ols = function(A, y) solve(t(A)%*%A)%*%t(A)%*%y
ols(A, y)
# Indexing
# A B y (anzeigen)
A[3,2] * B[2,1]
A[1,] * B[,3]
y[y>1]
A[,2][A[,1] >= 4]
# A[4,]
# Custom function
standardize = function(x) {
if (is.numeric(x)){
mu = mean(x)
std = sd(x)
return((x - mu) / std)
}
else{
return(x)
}
}
a = c(-100, -25, -10, 0, 10, 25, 100)
standardize(a)
# Using inbuilt-functions
dnorm(x = c(1,2,3,6))
x = seq(-2,2, by=0.2)
nvValues = dnorm(x, mean = 0, sd = 1)
plot(x = x, y = nvValues, type='l')
A
# Variables and Classes
a <- 3.0
b <- 4.5
class(a)
class(b) == 'character'
a^2 + 1/b
sqrt(a*b)
log2(a)
# Matrix algebra
A = matrix(c(1:8, 10), nrow=3, byrow=TRUE)
B = matrix(c(1:9), nrow=3)
y = matrix(c(1:3))
a * A
A %*% B
invA = solve(A)
A %*%invA
t(B)
B[1,] = c(1,1,1)
ols = function(A, y) solve(t(A)%*%A)%*%t(A)%*%y
ols(A, y)
# Indexing
# A B y (anzeigen)
A[3,2] * B[2,1]
A[1,] * B[,3]
y[y>1]
A[,2][A[,1] >= 4]
# A[4,]
# Custom function
standardize = function(x) {
if (is.numeric(x)){
mu = mean(x)
std = sd(x)
return((x - mu) / std)
}
else{
return(x)
}
}
a = c(-100, -25, -10, 0, 10, 25, 100)
standardize(a)
# Using inbuilt-functions
dnorm(x = c(1,2,3,6))
x = seq(-2,2, by=0.2)
nvValues = dnorm(x, mean = 0, sd = 1)
plot(x = x, y = nvValues, type='l')
ols(A, y)
A[,2][A[,1] >= 4]
x<-10
y <-10:15
z <- c('Hi', 'everyone')
l <- list(x,y,z)
l
l[1]
l[[1]]
class(l[[1]])
l
# All columns in the data.frame have to have the same length
# But they can have different classes
x <- 1:5
y <- seq(from = 1, to = 10, by = 2)
z <- c("a", "b", "c", "d", "e")
# Create a data.frame
df <- data.frame(x, y, z)
df
df <- data.frame("column1" = x, "column2" = y, z)
df
# We can reassign names, just like we reassigned dimensions
colnames(df) <- c("variable1", "variable2", "variable3")
rownames(df) <- c("obs1", "obs2", "obs3", "obs4", "obs5")
df
# Indexing data frames
# By position
df[1:2,]
df[,2:3]
df[,2]
# By name...
df[c("obs4", "obs5"), c("variable1", "variable2")]
# ...with a shortcut $ for selecting one column by name
df$variable2
df["variable2"]
# Calculating the mean of variable 2
mean(df$variable2)
# All columns in the data.frame have to have the same length
# But they can have different classes
x <- 1:5
y <- seq(from = 1, to = 10, by = 2)
z <- c("a", "b", "c", "d", "e")
# Create a data.frame
df <- data.frame(x, y, z)
df
df
df <- data.frame("column1" = x, "column2" = y, z)
df
# We can reassign names, just like we reassigned dimensions
colnames(df) <- c("variable1", "variable2", "variable3")
rownames(df) <- c("obs1", "obs2", "obs3", "obs4", "obs5")
df[1:2]
df
df[1:3]
df[1:1]
df[1:2]
df[,2:3]
df[:-1,2:3]
df[:2,2:3]
df[,2:3]
df[2:3]
df[,2]
df$variable2
df[2,]
df[2:3,2:3]
df[:3,2:3]
df[3:,2:3]
# set working directory
setwd("C:/Users/Hagen/uni/DS")
# load data from csv
loan <- read.csv('loan_data.csv',sep = ';', header = TRUE)
str(loan)
#summarise data
summary(loan)
# Get caret and look at the train-method (idk why, part of the task)
library(caret)
help(train)
# Histogram time
hist(loan$dINC_A)  # single value with default function
library(Hmisc)
hist(loan) # All the values with Hmisc
# Boxplot
inc.good <- loan$dINC_A[loan$BAD == 0]
inc.bad <- loan$dINC_A[loan$BAD == 1]
boxplot(x = inc.good, inc.bad, names = c('Good', 'Bad'), ylab=('Applicants income [$]'))
# compare salary means
mean_good = mean(inc.good)
mean_bad = mean(inc.bad)
difference = mean_good - mean_bad
result = t.test(inc.good, inc.bad)
print(result$p.value) # is small and therefore significant yaayy \o/
class(loans$BAD)
class(loan$BAD)
factor(x = loan)
factor(x = loan$BAD)
factor(x = loan$BAD, labels=c("good", "bad"))
factor(x = loan$BAD, labels=c("good", "bad"))
summary(factor(x = loan$BAD, labels=c("good", "bad")))
test <- c("good", "bad", "good", "bad")
factor(test, label=c(0,1))
which(x = loan, is.numeric())
which(apply(loans, is.numeric))
which(apply(loans, is.numeric), is.numeric)
apply(loans, FUN = is.numeric)
apply(loan, FUN = is.numeric)
apply(loan, FUN = is.numeric, 2)
apply(loan,2, FUN = is.numeric)
summary(loan)
is.numeric(loan$YOB)
apply(loan,2, FUN = is.numeric())
apply(loan,2, FUN = is.numeric
apply(loan,2, FUN = is.numeric)
apply(loan,2, FUN = is.numeric)
apply(X = loan, 2, FUN='is.numeri')
apply(X = loan, 2, FUN='is.numeric')
apply(X = loan, 2, FUN='is.numeric()')
apply(X = loan, 2, FUN='is.numeric')
loans
loan
apply(loan, 2, is.numeric)
sapply(loan, is.numeric)
apply(X = loan, FUN='is.numeric',MARGIN = 2 )
apply(X = loan, FUN='is.numeric',MARGIN = 1 )
apply(X = loan, FUN='is.numeric',MARGIN = 0 )
apply(X = loan, FUN='is.numeric',MARGIN = 0)
apply(X = loan, FUN='is.numeric',MARGIN=c(1,2))
apply(X = loan, FUN='is.numeric',MARGIN=c(2))
apply(X = loan, FUN='is.numeric',MARGIN=c(1))
# Apply function standardize to all numeric value
idx.numvar <- sapply(loans, is.numeric)
tmp <- sapply(loans[, idx.numvar], standardize)
summary(tmp)
tmp <- sapply(loan[, idx.numvar], standardize)
# Apply function standardize to all numeric value
idx.numvar <- sapply(loan, is.numeric)
tmp <- sapply(loan[, idx.numvar], standardize)
summary(tmp)
apply(loan, MARGIN = 2, FUN = "is.numeric")
loan.colname
colname(loan)
columnname(loan)
colnames(loans)
colnames(loan)
apply(loan, MARGIN = colnames(loan), FUN = "is.numeric")
